const acorn = require('acorn')
const estraverse = require('estraverse')
const genCode = require('escodegen')
const genId = require('./gen-id')

const sourceMap = require('source-map')
const SourceMapConsumer = sourceMap.SourceMapConsumer

module.exports = async function(contents, sourcemap) {
  const id = genId(this.resourcePath, process.cwd())
  let hasComponent = false

  const parseOptions = { sourceType: 'module', ecmaVersion: 9 }

  if (this.sourceMap) {
    parseOptions.locations = true
    parseOptions.sourceFile = this.resourcePath
  }

  const ast = acorn.parse(contents, parseOptions)

  const res = estraverse.replace(ast, {
    enter(node, parent) {
      if (node.type === 'ExportDefaultDeclaration') {
        hasComponent = true

        const component = node.declaration

        const componentId = {
          type: 'Identifier',
          name: '__component__'
        }

        node.declaration = componentId
        parent.body.push(node)

        return {
          type: 'VariableDeclaration',
          declarations: [
            {
              type: 'VariableDeclarator',
              id: componentId,
              init: component
            }
          ],
          kind: 'var'
        }
      }
    }
  })

  if (!hasComponent) {
    this.callback(null, contents, sourcemap)
    return
  }

  if (this.sourceMap) {
    const generatedContents = genCode.generate(res, {
      sourceMap: this.resourcePath,
      sourceMapWithCode: true,
      sourceContent: contents
    })

    // apply the original sourcemap to the sourcemap generated by escodegen.
    const sourceMapGenerator = generatedContents.map

    if (sourcemap) {
      const originalSmc = await new SourceMapConsumer(sourcemap)
      sourceMapGenerator.applySourceMap(originalSmc)
      originalSmc.destroy()
    }

    const outSourcemap = sourceMapGenerator.toJSON()

    this.callback(null, generatedContents.code + genHotReload(id), outSourcemap)
  } else {
    const generatedContents = genCode.generate(res)

    this.callback(null, generatedContents + genHotReload(id))
  }
}

function genHotReload(id) {
  return `
if (module.hot) {(function(options) {
  if (typeof options === 'function') {
    options = __component__.options
  }

  var api = require('vue-hot-reload-api')
  var Vue = require('vue')

  api.install(Vue)

  if (api.compatible) {
    module.hot.accept()
    if (!module.hot.data) {
      api.createRecord("${id}", options)
    } else {
      api.reload("${id}", options)
    }
  }})(__component__)
}`
}
